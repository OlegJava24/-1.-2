import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<User> users = Arrays.asList(
                new User(1, "John", "Doe", 25, "USA"),
                new User(2, "Jane", "Smith", 30, "Canada"),
                new User(3, "Alice", "Johnson", 22, "UK"),
                new User(4, "Bob", "Brown", 28, "Australia"),
                new User(5, "Charlie", "Davis", 35, "USA")
        );

        // Примеры вызовов методов
        System.out.println("Сортировка по фамилии:");
        sortByLastName(users).forEach(System.out::println);

        System.out.println("\nСортировка по возрасту:");
        sortByAge(users).forEach(System.out::println);

        System.out.println("\nВсе пользователи старше 7 лет: " + allUsersOlderThan7(users));

        System.out.println("\nСредний возраст пользователей: " + averageAge(users));

        System.out.println("\nКоличество разных стран: " + countDistinctCountries(users));
    }

    // 1) Сортировка по lastName
    public static List<User> sortByLastName(List<User> users) {
        return users.stream()
                .sorted((u1, u2) -> u1.getLastName().compareToIgnoreCase(u2.getLastName()))
                .toList();
    }

    // 2) Сортировка по age
    public static List<User> sortByAge(List<User> users) {
        return users.stream()
                .sorted((u1, u2) -> Integer.compare(u1.getAge(), u2.getAge()))
                .toList();
    }

    // 3) Проверка, что все пользователи старше 7 лет
    public static boolean allUsersOlderThan7(List<User> users) {
        return users.stream()
                .allMatch(user -> user.getAge() > 7);
    }

    // 4) Вычисление среднего возраста
    public static double averageAge(List<User> users) {
        return users.stream()
                .mapToInt(User::getAge)
                .average()
                .orElse(0);
    }

    // 5) Количество разных стран
    public static long countDistinctCountries(List<User> users) {
        return users.stream()
                .map(User::getCountry)
                .distinct()
                .count();
    }
}
